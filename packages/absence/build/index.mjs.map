{"version":3,"file":"index.mjs","sources":["../source/helpers/tree.ts","../source/core/request.ts","../source/core/server.ts","../source/core/response.ts"],"sourcesContent":["enum Kind {\r\n  ROOT,\r\n  STATIC,\r\n  PARAMETER,\r\n  CATCH_ALL,\r\n}\r\n\r\ntype Nullable<V> = V | null\r\n\r\ninterface Node<P, K = Kind> {\r\n  type: K\r\n  path: string\r\n  data: Nullable<P>\r\n  priority: number\r\n\r\n  childIndex: string\r\n  childValues: Node<P>[]\r\n  childWild: Nullable<Node<P, Kind.PARAMETER | Kind.CATCH_ALL>>\r\n}\r\n\r\nexport class Tree<P> {\r\n  root: Node<P, Kind.ROOT> = {\r\n    type: Kind.ROOT,\r\n    path: \"/\",\r\n    data: null,\r\n    priority: 0,\r\n\r\n    childIndex: \"\",\r\n    childValues: [],\r\n    childWild: null,\r\n  }\r\n\r\n  /** Finds branch and inserts node */\r\n  public add(path: string, data: P, node: Node<P> = this.root): void {\r\n    const commonPrefixLength = this.findCommonPrefixLength(path, node.path)\r\n    // if (commonPrefixLength === 0) throw new Error(\"Cannot add child node\")\r\n\r\n    // Split edge\r\n    if (commonPrefixLength < node.path.length) {\r\n      const child: Node<P> = {\r\n        path: node.path.slice(commonPrefixLength),\r\n        type: node.type,\r\n        data: node.data,\r\n        priority: node.priority,\r\n        childIndex: node.childIndex,\r\n        childValues: node.childValues,\r\n        childWild: node.childWild,\r\n      }\r\n\r\n      node.type = Kind.STATIC\r\n      node.data = null\r\n      node.childIndex = node.path[commonPrefixLength]\r\n      node.path = node.path.slice(0, commonPrefixLength)\r\n      node.priority += 1\r\n      node.childValues = [child]\r\n      node.childWild = null\r\n    }\r\n\r\n    // Add child node\r\n    if (commonPrefixLength < path.length) {\r\n      path = path.slice(commonPrefixLength)\r\n      const childIndex = path[0]\r\n\r\n      for (let index = 0; index < node.childIndex.length; index++)\r\n        if (childIndex === node.childIndex[index]) {\r\n          node.priority += 1\r\n          this.add(path, data, node.childValues[index])\r\n          this.sortOnPriorityFrom(index, node)\r\n          return\r\n        }\r\n\r\n      node.priority += 1\r\n      return this.insertInNode(node, path, data)\r\n    }\r\n\r\n    // Set data to node\r\n    if (node.data !== null) throw new Error(`Found duplicate routes`)\r\n    else node.data = data\r\n  }\r\n\r\n  /** Sort based on priority */\r\n  private sortOnPriorityFrom(position: number, node: Node<P>) {\r\n    const children = node.childValues\r\n    const index = node.childIndex\r\n    const priority = children[position].priority\r\n\r\n    let newPosition = position\r\n    while (newPosition > 0 && children[newPosition - 1].priority < priority) {\r\n      ;[children[newPosition], children[newPosition - 1]] = [\r\n        children[newPosition - 1],\r\n        children[newPosition],\r\n      ]\r\n      newPosition--\r\n    }\r\n\r\n    if (newPosition !== position)\r\n      node.childIndex =\r\n        index.slice(0, newPosition) +\r\n        index[position] +\r\n        index.slice(newPosition, position) +\r\n        index.slice(position + 1)\r\n  }\r\n\r\n  /** Find common prefix's length */\r\n  private findCommonPrefixLength(a: string, b: string) {\r\n    const m = Math.min(a.length, b.length)\r\n    let index = 0\r\n    while (index < m && a[index] === b[index]) index++\r\n    return index\r\n  }\r\n\r\n  /** Tries inserting in the given node */\r\n  private insertInNode(node: Node<P>, path: string, data: P) {\r\n    const wildcard = this.findWildCard(path)\r\n\r\n    // If there is a wildcard\r\n    if (wildcard.startIndex > -1) {\r\n      const parameter = path.slice(wildcard.startIndex, wildcard.endIndex + 1)\r\n      const wildchildType =\r\n        parameter[0] === \":\" ? Kind.PARAMETER : Kind.CATCH_ALL\r\n\r\n      // If there is a prefix before the wildcard\r\n      if (wildcard.startIndex > 0) {\r\n        const child: Node<P> = {\r\n          type: Kind.STATIC,\r\n          path: path.slice(0, wildcard.startIndex),\r\n          data: null,\r\n          priority: 1,\r\n          childIndex: \"\",\r\n          childValues: [],\r\n          childWild: null,\r\n        }\r\n\r\n        node.childIndex += path[0]\r\n        node.childValues.push(child)\r\n\r\n        node = child\r\n      }\r\n\r\n      // If the child doesn't already exist\r\n      if (!node.childWild)\r\n        node.childWild = {\r\n          path: parameter,\r\n          type: wildchildType,\r\n          data: null,\r\n          priority: 0,\r\n          childIndex: \"\",\r\n          childValues: [],\r\n          childWild: null,\r\n        }\r\n      else if (node.childWild.path !== parameter) {\r\n        const setParameter = parameter.slice(0, -1)\r\n        const existentParameter = node.childWild.path.slice(0, -1)\r\n\r\n        throw new Error(\r\n          `Found duplicate parameters at same position - ${setParameter}, ${existentParameter}`\r\n        )\r\n      }\r\n\r\n      // If there are deeper nodes\r\n      if (wildcard.endIndex + 1 < path.length)\r\n        if (wildchildType === Kind.PARAMETER)\r\n          return this.add(path.slice(wildcard.startIndex), data, node.childWild)\r\n        else throw new Error(\"Found path after catch all parameter\")\r\n\r\n      node.childWild.data = data\r\n      return\r\n    }\r\n\r\n    node.childIndex += path[0]\r\n    node.childValues.push({\r\n      type: Kind.STATIC,\r\n      path,\r\n      data,\r\n      priority: 0,\r\n      childIndex: \"\",\r\n      childValues: [],\r\n      childWild: null,\r\n    })\r\n  }\r\n\r\n  /** Finds wild card start and end index, throw's if invalid path */\r\n  private findWildCard(path: string) {\r\n    let startIndex = -1\r\n    let endIndex = path.length - 1\r\n    let type: Nullable<Kind.PARAMETER | Kind.CATCH_ALL> = null\r\n\r\n    for (let index = 0; index < path.length; index++) {\r\n      if (path[index] === \":\") {\r\n        if (startIndex > -1)\r\n          throw new Error(\"Found multiple parameters in same segment\")\r\n        startIndex = index\r\n        type = Kind.PARAMETER\r\n      }\r\n\r\n      if (path[index] === \"*\") {\r\n        if (startIndex > -1)\r\n          throw new Error(\"Found multiple parameters in same segment\")\r\n        startIndex = index\r\n        type = Kind.CATCH_ALL\r\n      }\r\n\r\n      if (path[index] === \"/\") {\r\n        if (startIndex > -1) {\r\n          endIndex = index\r\n          break\r\n        }\r\n      }\r\n    }\r\n\r\n    return { startIndex, endIndex, type }\r\n  }\r\n\r\n  /** Lookup a node */\r\n  lookup(path: string) {\r\n    let node: Node<P> = this.root\r\n    let data: Nullable<P> = null\r\n    const parameters: Record<string, string> = {}\r\n\r\n    NEXT_NODE: while (true) {\r\n      if (path.length > node.path.length) {\r\n        if (path.slice(0, node.path.length) === node.path) {\r\n          path = path.slice(node.path.length)\r\n\r\n          const character = path[0]\r\n          const childIndex = node.childIndex\r\n\r\n          for (let index = 0; index < childIndex.length; index++) {\r\n            if (character === childIndex[index]) {\r\n              node = node.childValues[index]\r\n              continue NEXT_NODE\r\n            }\r\n          }\r\n\r\n          if (node.childWild) {\r\n            node = node.childWild\r\n\r\n            switch (node.type) {\r\n              case Kind.PARAMETER:\r\n                let slashIndex = 0\r\n                while (slashIndex < path.length && path[slashIndex] !== \"/\")\r\n                  slashIndex++\r\n\r\n                parameters[node.path.slice(1, -1)] = path.slice(0, slashIndex)\r\n\r\n                if (path.length > slashIndex + 1) {\r\n                  if (node.childValues.length > 0) {\r\n                    path = path.slice(slashIndex + 1)\r\n\r\n                    const character = path[0]\r\n                    const childIndex = node.childIndex\r\n\r\n                    for (let index = 0; index < childIndex.length; index++) {\r\n                      if (character === childIndex[index]) {\r\n                        node = node.childValues[index]\r\n                        continue NEXT_NODE\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  return null\r\n                }\r\n\r\n                if (node.data) return { data: node.data, parameters }\r\n                else return null\r\n\r\n              case Kind.CATCH_ALL:\r\n                parameters[node.path.slice(1, -1)] = path\r\n\r\n                return { data: node.data!, parameters }\r\n            }\r\n          }\r\n        }\r\n      } else if (path === node.path) {\r\n        data = node.data\r\n      }\r\n\r\n      if (data) return { data, parameters }\r\n      else return null\r\n    }\r\n  }\r\n}\r\n","import UWS from \"uWebSockets.js\"\r\n\r\nconst MULTI_SLASH_REGEX = /\\/+|(?<!\\/)($|^)/g\r\n\r\nexport function normalizePath(path: string) {\r\n  return path.replace(MULTI_SLASH_REGEX, \"/\")\r\n}\r\n\r\nfunction getHeaders(request: UWS.HttpRequest) {\r\n  const headers: Record<string, string> = {}\r\n  request.forEach((key, value) => (headers[key] = value))\r\n  return headers\r\n}\r\n\r\nfunction getBody(response: UWS.HttpResponse) {\r\n  return new Promise<string>((resolve) => {\r\n    const body: Buffer[] = []\r\n\r\n    response.onData((chunk, isLast) => {\r\n      body.push(Buffer.from(chunk))\r\n      if (isLast) resolve(Buffer.concat(body).toString())\r\n    })\r\n  })\r\n}\r\n\r\nfunction getQueries(request: UWS.HttpRequest) {\r\n  return Object.fromEntries(new URLSearchParams(request.getQuery()).entries())\r\n}\r\n\r\nexport async function extractRequest(\r\n  response: UWS.HttpResponse,\r\n  request: UWS.HttpRequest\r\n) {\r\n  const path = normalizePath(request.getUrl())\r\n  const method = request.getMethod()\r\n  const queries = getQueries(request)\r\n  const headers = getHeaders(request)\r\n  const body = await getBody(response)\r\n\r\n  return { path, method, queries, headers, body }\r\n}\r\n","import * as UWS from \"uWebSockets.js\"\r\n\r\nimport { BaseContext, Plugin, Response, Route, RouteDetails, Server } from \".\"\r\nimport { Tree } from \"../helpers/tree\"\r\nimport { extractRequest, normalizePath } from \"./request\"\r\nimport { createResponse } from \"./response\"\r\n\r\nfunction defaultErrorHandler(error: Error) {\r\n  console.error(error)\r\n  if (process.env.NODE_ENV === \"production\") process.exit(1)\r\n}\r\n\r\nexport function createServer<C extends BaseContext = BaseContext>(): Server<C> {\r\n  const sockets: UWS.us_listen_socket[] = []\r\n  const plugins: Plugin[] = []\r\n  const routes: Record<string, Tree<RouteDetails<C>>> = {}\r\n  let userErrorHandler: null | ((error: Error) => Promise<void>) = null\r\n\r\n  function handleError(error: Error, response?: Response) {\r\n    if (response) response.setStatus(500).send()\r\n    if (userErrorHandler) userErrorHandler(error).catch(defaultErrorHandler)\r\n    else defaultErrorHandler(error)\r\n  }\r\n\r\n  return {\r\n    use<N extends string, P extends {}>(plugin: Plugin<N, C, P>) {\r\n      plugins.push(plugin)\r\n      return this as Server<{ [name in N]: P } & C>\r\n    },\r\n\r\n    route(o) {\r\n      const options = typeof o === \"object\" ? o : { path: o, method: \"all\" }\r\n      const plugins: Plugin[] = []\r\n\r\n      return {\r\n        use<N extends string, P extends {}>(plugin: Plugin<N, C, P>) {\r\n          plugins.push(plugin)\r\n          return this as Route<{ [name in N]: P } & C>\r\n        },\r\n\r\n        handle(handler) {\r\n          if (!routes[options.method]) routes[options.method] = new Tree()\r\n\r\n          routes[options.method].add(normalizePath(options.path), {\r\n            plugins,\r\n            handler,\r\n            ...options,\r\n          })\r\n        },\r\n      }\r\n    },\r\n\r\n    useErrorHandler(handler) {\r\n      userErrorHandler = handler\r\n      return this\r\n    },\r\n\r\n    listen(port) {\r\n      return new Promise<number>((resolve, reject) => {\r\n        const server = UWS.App()\r\n\r\n        server.any(\r\n          \"/*\",\r\n          async (\r\n            uwsResponse: UWS.HttpResponse,\r\n            uwsRequest: UWS.HttpRequest\r\n          ) => {\r\n            const response = createResponse(uwsResponse)\r\n            const request = await extractRequest(uwsResponse, uwsRequest)\r\n\r\n            const route =\r\n              routes[request.method]?.lookup(request.path) ||\r\n              routes.all?.lookup(request.path)\r\n\r\n            if (!route) return response.setStatus(404).send()\r\n\r\n            const context: BaseContext & Record<string, unknown> = {\r\n              request: { ...request, parameters: route.parameters },\r\n              response,\r\n            }\r\n\r\n            for (const plugin of [...plugins, ...route.data.plugins])\r\n              if (plugin.initialize) {\r\n                const data = await plugin.initialize()\r\n                if (data) context[plugin.name] = data\r\n              }\r\n\r\n            route.data\r\n              .handler(context as C)\r\n              .catch((error) => handleError(error, response))\r\n          }\r\n        )\r\n\r\n        server.listen(port, 1, (socket) => {\r\n          if (socket) {\r\n            sockets.push(socket)\r\n            resolve(UWS.us_socket_local_port(socket))\r\n          } else {\r\n            reject(new Error(`Could not connect to ${port}`))\r\n          }\r\n        })\r\n      })\r\n    },\r\n\r\n    stop() {\r\n      for (const socket of sockets) UWS.us_listen_socket_close(socket)\r\n      sockets.length = 0\r\n    },\r\n  }\r\n}\r\n","import UWS from \"uWebSockets.js\"\r\nimport { STATUS_CODES } from \"http\"\r\nimport { Response } from \".\"\r\n\r\ninterface Payload {\r\n  headers: Record<string, string>\r\n  status: string\r\n  body: string\r\n}\r\n\r\nexport function createResponse(uwsResponse: UWS.HttpResponse): Response {\r\n  const uwsStatus = { aborted: false }\r\n  uwsResponse.onAborted(() => (uwsStatus.aborted = true))\r\n\r\n  const response: Payload = {\r\n    headers: {},\r\n    body: \"\",\r\n    status: `418 ${STATUS_CODES[418]}`,\r\n  }\r\n\r\n  return {\r\n    setHeader(key: string, value: string) {\r\n      response.headers[key] = value\r\n      return this\r\n    },\r\n\r\n    setStatus(status: number, message = STATUS_CODES[status]) {\r\n      response.status = `${status} ${message}`\r\n      return this\r\n    },\r\n\r\n    send(data?: string) {\r\n      if (data) response.body = data\r\n\r\n      if (!uwsStatus.aborted)\r\n        uwsResponse.cork(() => {\r\n          for (const key in response.headers)\r\n            uwsResponse.writeHeader(key, response.headers[key])\r\n\r\n          uwsResponse.writeStatus(response.status)\r\n          uwsResponse.end(response.body)\r\n        })\r\n    },\r\n  }\r\n}\r\n"],"names":["Kind","Tree","root","type","ROOT","path","data","priority","childIndex","childValues","childWild","add","node","this","commonPrefixLength","findCommonPrefixLength","length","child","slice","STATIC","index","sortOnPriorityFrom","insertInNode","Error","position","children","newPosition","a","b","m","Math","min","wildcard","findWildCard","startIndex","parameter","endIndex","wildchildType","PARAMETER","CATCH_ALL","push","setParameter","existentParameter","lookup","parameters","NEXT_NODE","character","slashIndex","MULTI_SLASH_REGEX","normalizePath","replace","async","extractRequest","response","request","getUrl","method","getMethod","queries","Object","fromEntries","URLSearchParams","getQuery","entries","getQueries","headers","forEach","key","value","getHeaders","body","Promise","resolve","onData","chunk","isLast","Buffer","from","concat","toString","getBody","defaultErrorHandler","error","console","process","env","NODE_ENV","exit","createServer","sockets","plugins","routes","userErrorHandler","use","plugin","route","o","options","handle","handler","useErrorHandler","listen","port","reject","server","UWS","App","any","uwsResponse","uwsRequest","uwsStatus","aborted","onAborted","status","STATUS_CODES","setHeader","setStatus","message","send","cork","writeHeader","writeStatus","end","createResponse","all","context","initialize","name","catch","handleError","socket","us_socket_local_port","stop","us_listen_socket_close"],"mappings":"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"}